// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/scotty/internal/ent/autorolerule"
	"github.com/SethCurry/scotty/internal/ent/guild"
)

// AutoRoleRuleCreate is the builder for creating a AutoRoleRule entity.
type AutoRoleRuleCreate struct {
	config
	mutation *AutoRoleRuleMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (arrc *AutoRoleRuleCreate) SetRoleID(s string) *AutoRoleRuleCreate {
	arrc.mutation.SetRoleID(s)
	return arrc
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (arrc *AutoRoleRuleCreate) SetGuildID(id int) *AutoRoleRuleCreate {
	arrc.mutation.SetGuildID(id)
	return arrc
}

// SetNillableGuildID sets the "guild" edge to the Guild entity by ID if the given value is not nil.
func (arrc *AutoRoleRuleCreate) SetNillableGuildID(id *int) *AutoRoleRuleCreate {
	if id != nil {
		arrc = arrc.SetGuildID(*id)
	}
	return arrc
}

// SetGuild sets the "guild" edge to the Guild entity.
func (arrc *AutoRoleRuleCreate) SetGuild(g *Guild) *AutoRoleRuleCreate {
	return arrc.SetGuildID(g.ID)
}

// Mutation returns the AutoRoleRuleMutation object of the builder.
func (arrc *AutoRoleRuleCreate) Mutation() *AutoRoleRuleMutation {
	return arrc.mutation
}

// Save creates the AutoRoleRule in the database.
func (arrc *AutoRoleRuleCreate) Save(ctx context.Context) (*AutoRoleRule, error) {
	return withHooks(ctx, arrc.sqlSave, arrc.mutation, arrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arrc *AutoRoleRuleCreate) SaveX(ctx context.Context) *AutoRoleRule {
	v, err := arrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arrc *AutoRoleRuleCreate) Exec(ctx context.Context) error {
	_, err := arrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arrc *AutoRoleRuleCreate) ExecX(ctx context.Context) {
	if err := arrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arrc *AutoRoleRuleCreate) check() error {
	if _, ok := arrc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "AutoRoleRule.role_id"`)}
	}
	return nil
}

func (arrc *AutoRoleRuleCreate) sqlSave(ctx context.Context) (*AutoRoleRule, error) {
	if err := arrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	arrc.mutation.id = &_node.ID
	arrc.mutation.done = true
	return _node, nil
}

func (arrc *AutoRoleRuleCreate) createSpec() (*AutoRoleRule, *sqlgraph.CreateSpec) {
	var (
		_node = &AutoRoleRule{config: arrc.config}
		_spec = sqlgraph.NewCreateSpec(autorolerule.Table, sqlgraph.NewFieldSpec(autorolerule.FieldID, field.TypeInt))
	)
	if value, ok := arrc.mutation.RoleID(); ok {
		_spec.SetField(autorolerule.FieldRoleID, field.TypeString, value)
		_node.RoleID = value
	}
	if nodes := arrc.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   autorolerule.GuildTable,
			Columns: []string{autorolerule.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.auto_role_rule_guild = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AutoRoleRuleCreateBulk is the builder for creating many AutoRoleRule entities in bulk.
type AutoRoleRuleCreateBulk struct {
	config
	err      error
	builders []*AutoRoleRuleCreate
}

// Save creates the AutoRoleRule entities in the database.
func (arrcb *AutoRoleRuleCreateBulk) Save(ctx context.Context) ([]*AutoRoleRule, error) {
	if arrcb.err != nil {
		return nil, arrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arrcb.builders))
	nodes := make([]*AutoRoleRule, len(arrcb.builders))
	mutators := make([]Mutator, len(arrcb.builders))
	for i := range arrcb.builders {
		func(i int, root context.Context) {
			builder := arrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AutoRoleRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arrcb *AutoRoleRuleCreateBulk) SaveX(ctx context.Context) []*AutoRoleRule {
	v, err := arrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arrcb *AutoRoleRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := arrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arrcb *AutoRoleRuleCreateBulk) ExecX(ctx context.Context) {
	if err := arrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
