// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/scotty/internal/ent/autorolerule"
	"github.com/SethCurry/scotty/internal/ent/predicate"
)

// AutoRoleRuleUpdate is the builder for updating AutoRoleRule entities.
type AutoRoleRuleUpdate struct {
	config
	hooks    []Hook
	mutation *AutoRoleRuleMutation
}

// Where appends a list predicates to the AutoRoleRuleUpdate builder.
func (arru *AutoRoleRuleUpdate) Where(ps ...predicate.AutoRoleRule) *AutoRoleRuleUpdate {
	arru.mutation.Where(ps...)
	return arru
}

// SetRoleID sets the "role_id" field.
func (arru *AutoRoleRuleUpdate) SetRoleID(s string) *AutoRoleRuleUpdate {
	arru.mutation.SetRoleID(s)
	return arru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (arru *AutoRoleRuleUpdate) SetNillableRoleID(s *string) *AutoRoleRuleUpdate {
	if s != nil {
		arru.SetRoleID(*s)
	}
	return arru
}

// Mutation returns the AutoRoleRuleMutation object of the builder.
func (arru *AutoRoleRuleUpdate) Mutation() *AutoRoleRuleMutation {
	return arru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (arru *AutoRoleRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, arru.sqlSave, arru.mutation, arru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (arru *AutoRoleRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := arru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (arru *AutoRoleRuleUpdate) Exec(ctx context.Context) error {
	_, err := arru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arru *AutoRoleRuleUpdate) ExecX(ctx context.Context) {
	if err := arru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (arru *AutoRoleRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(autorolerule.Table, autorolerule.Columns, sqlgraph.NewFieldSpec(autorolerule.FieldID, field.TypeInt))
	if ps := arru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := arru.mutation.RoleID(); ok {
		_spec.SetField(autorolerule.FieldRoleID, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, arru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autorolerule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	arru.mutation.done = true
	return n, nil
}

// AutoRoleRuleUpdateOne is the builder for updating a single AutoRoleRule entity.
type AutoRoleRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AutoRoleRuleMutation
}

// SetRoleID sets the "role_id" field.
func (arruo *AutoRoleRuleUpdateOne) SetRoleID(s string) *AutoRoleRuleUpdateOne {
	arruo.mutation.SetRoleID(s)
	return arruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (arruo *AutoRoleRuleUpdateOne) SetNillableRoleID(s *string) *AutoRoleRuleUpdateOne {
	if s != nil {
		arruo.SetRoleID(*s)
	}
	return arruo
}

// Mutation returns the AutoRoleRuleMutation object of the builder.
func (arruo *AutoRoleRuleUpdateOne) Mutation() *AutoRoleRuleMutation {
	return arruo.mutation
}

// Where appends a list predicates to the AutoRoleRuleUpdate builder.
func (arruo *AutoRoleRuleUpdateOne) Where(ps ...predicate.AutoRoleRule) *AutoRoleRuleUpdateOne {
	arruo.mutation.Where(ps...)
	return arruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (arruo *AutoRoleRuleUpdateOne) Select(field string, fields ...string) *AutoRoleRuleUpdateOne {
	arruo.fields = append([]string{field}, fields...)
	return arruo
}

// Save executes the query and returns the updated AutoRoleRule entity.
func (arruo *AutoRoleRuleUpdateOne) Save(ctx context.Context) (*AutoRoleRule, error) {
	return withHooks(ctx, arruo.sqlSave, arruo.mutation, arruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (arruo *AutoRoleRuleUpdateOne) SaveX(ctx context.Context) *AutoRoleRule {
	node, err := arruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (arruo *AutoRoleRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := arruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arruo *AutoRoleRuleUpdateOne) ExecX(ctx context.Context) {
	if err := arruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (arruo *AutoRoleRuleUpdateOne) sqlSave(ctx context.Context) (_node *AutoRoleRule, err error) {
	_spec := sqlgraph.NewUpdateSpec(autorolerule.Table, autorolerule.Columns, sqlgraph.NewFieldSpec(autorolerule.FieldID, field.TypeInt))
	id, ok := arruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AutoRoleRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := arruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, autorolerule.FieldID)
		for _, f := range fields {
			if !autorolerule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != autorolerule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := arruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := arruo.mutation.RoleID(); ok {
		_spec.SetField(autorolerule.FieldRoleID, field.TypeString, value)
	}
	_node = &AutoRoleRule{config: arruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, arruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autorolerule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	arruo.mutation.done = true
	return _node, nil
}
