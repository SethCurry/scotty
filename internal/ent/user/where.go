// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"github.com/SethCurry/scotty/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// DiscordID applies equality check predicate on the "discord_id" field. It's identical to DiscordIDEQ.
func DiscordID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDiscordID, v))
}

// RankedScore applies equality check predicate on the "ranked_score" field. It's identical to RankedScoreEQ.
func RankedScore(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRankedScore, v))
}

// FinalsID applies equality check predicate on the "finals_id" field. It's identical to FinalsIDEQ.
func FinalsID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFinalsID, v))
}

// DiscordIDEQ applies the EQ predicate on the "discord_id" field.
func DiscordIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDiscordID, v))
}

// DiscordIDNEQ applies the NEQ predicate on the "discord_id" field.
func DiscordIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDiscordID, v))
}

// DiscordIDIn applies the In predicate on the "discord_id" field.
func DiscordIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDiscordID, vs...))
}

// DiscordIDNotIn applies the NotIn predicate on the "discord_id" field.
func DiscordIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDiscordID, vs...))
}

// DiscordIDGT applies the GT predicate on the "discord_id" field.
func DiscordIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDiscordID, v))
}

// DiscordIDGTE applies the GTE predicate on the "discord_id" field.
func DiscordIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDiscordID, v))
}

// DiscordIDLT applies the LT predicate on the "discord_id" field.
func DiscordIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDiscordID, v))
}

// DiscordIDLTE applies the LTE predicate on the "discord_id" field.
func DiscordIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDiscordID, v))
}

// DiscordIDContains applies the Contains predicate on the "discord_id" field.
func DiscordIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDiscordID, v))
}

// DiscordIDHasPrefix applies the HasPrefix predicate on the "discord_id" field.
func DiscordIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDiscordID, v))
}

// DiscordIDHasSuffix applies the HasSuffix predicate on the "discord_id" field.
func DiscordIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDiscordID, v))
}

// DiscordIDEqualFold applies the EqualFold predicate on the "discord_id" field.
func DiscordIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDiscordID, v))
}

// DiscordIDContainsFold applies the ContainsFold predicate on the "discord_id" field.
func DiscordIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDiscordID, v))
}

// RankedScoreEQ applies the EQ predicate on the "ranked_score" field.
func RankedScoreEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRankedScore, v))
}

// RankedScoreNEQ applies the NEQ predicate on the "ranked_score" field.
func RankedScoreNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRankedScore, v))
}

// RankedScoreIn applies the In predicate on the "ranked_score" field.
func RankedScoreIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldRankedScore, vs...))
}

// RankedScoreNotIn applies the NotIn predicate on the "ranked_score" field.
func RankedScoreNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRankedScore, vs...))
}

// RankedScoreGT applies the GT predicate on the "ranked_score" field.
func RankedScoreGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldRankedScore, v))
}

// RankedScoreGTE applies the GTE predicate on the "ranked_score" field.
func RankedScoreGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRankedScore, v))
}

// RankedScoreLT applies the LT predicate on the "ranked_score" field.
func RankedScoreLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldRankedScore, v))
}

// RankedScoreLTE applies the LTE predicate on the "ranked_score" field.
func RankedScoreLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRankedScore, v))
}

// FinalsIDEQ applies the EQ predicate on the "finals_id" field.
func FinalsIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFinalsID, v))
}

// FinalsIDNEQ applies the NEQ predicate on the "finals_id" field.
func FinalsIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFinalsID, v))
}

// FinalsIDIn applies the In predicate on the "finals_id" field.
func FinalsIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFinalsID, vs...))
}

// FinalsIDNotIn applies the NotIn predicate on the "finals_id" field.
func FinalsIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFinalsID, vs...))
}

// FinalsIDGT applies the GT predicate on the "finals_id" field.
func FinalsIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFinalsID, v))
}

// FinalsIDGTE applies the GTE predicate on the "finals_id" field.
func FinalsIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFinalsID, v))
}

// FinalsIDLT applies the LT predicate on the "finals_id" field.
func FinalsIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFinalsID, v))
}

// FinalsIDLTE applies the LTE predicate on the "finals_id" field.
func FinalsIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFinalsID, v))
}

// FinalsIDContains applies the Contains predicate on the "finals_id" field.
func FinalsIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFinalsID, v))
}

// FinalsIDHasPrefix applies the HasPrefix predicate on the "finals_id" field.
func FinalsIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFinalsID, v))
}

// FinalsIDHasSuffix applies the HasSuffix predicate on the "finals_id" field.
func FinalsIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFinalsID, v))
}

// FinalsIDIsNil applies the IsNil predicate on the "finals_id" field.
func FinalsIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFinalsID))
}

// FinalsIDNotNil applies the NotNil predicate on the "finals_id" field.
func FinalsIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFinalsID))
}

// FinalsIDEqualFold applies the EqualFold predicate on the "finals_id" field.
func FinalsIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFinalsID, v))
}

// FinalsIDContainsFold applies the ContainsFold predicate on the "finals_id" field.
func FinalsIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFinalsID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
