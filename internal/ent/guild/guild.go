// Code generated by ent, DO NOT EDIT.

package guild

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the guild type in the database.
	Label = "guild"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldGuildID holds the string denoting the guild_id field in the database.
	FieldGuildID = "guild_id"
	// EdgeAutoRoleRules holds the string denoting the auto_role_rules edge name in mutations.
	EdgeAutoRoleRules = "auto_role_rules"
	// Table holds the table name of the guild in the database.
	Table = "guilds"
	// AutoRoleRulesTable is the table that holds the auto_role_rules relation/edge.
	AutoRoleRulesTable = "auto_role_rules"
	// AutoRoleRulesInverseTable is the table name for the AutoRoleRule entity.
	// It exists in this package in order to avoid circular dependency with the "autorolerule" package.
	AutoRoleRulesInverseTable = "auto_role_rules"
	// AutoRoleRulesColumn is the table column denoting the auto_role_rules relation/edge.
	AutoRoleRulesColumn = "auto_role_rule_guild"
)

// Columns holds all SQL columns for guild fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldGuildID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Guild queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByGuildID orders the results by the guild_id field.
func ByGuildID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGuildID, opts...).ToFunc()
}

// ByAutoRoleRulesCount orders the results by auto_role_rules count.
func ByAutoRoleRulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAutoRoleRulesStep(), opts...)
	}
}

// ByAutoRoleRules orders the results by auto_role_rules terms.
func ByAutoRoleRules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAutoRoleRulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAutoRoleRulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AutoRoleRulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AutoRoleRulesTable, AutoRoleRulesColumn),
	)
}
