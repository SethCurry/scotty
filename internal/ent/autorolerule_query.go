// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/scotty/internal/ent/autorolerule"
	"github.com/SethCurry/scotty/internal/ent/guild"
	"github.com/SethCurry/scotty/internal/ent/predicate"
)

// AutoRoleRuleQuery is the builder for querying AutoRoleRule entities.
type AutoRoleRuleQuery struct {
	config
	ctx        *QueryContext
	order      []autorolerule.OrderOption
	inters     []Interceptor
	predicates []predicate.AutoRoleRule
	withGuild  *GuildQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AutoRoleRuleQuery builder.
func (arrq *AutoRoleRuleQuery) Where(ps ...predicate.AutoRoleRule) *AutoRoleRuleQuery {
	arrq.predicates = append(arrq.predicates, ps...)
	return arrq
}

// Limit the number of records to be returned by this query.
func (arrq *AutoRoleRuleQuery) Limit(limit int) *AutoRoleRuleQuery {
	arrq.ctx.Limit = &limit
	return arrq
}

// Offset to start from.
func (arrq *AutoRoleRuleQuery) Offset(offset int) *AutoRoleRuleQuery {
	arrq.ctx.Offset = &offset
	return arrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (arrq *AutoRoleRuleQuery) Unique(unique bool) *AutoRoleRuleQuery {
	arrq.ctx.Unique = &unique
	return arrq
}

// Order specifies how the records should be ordered.
func (arrq *AutoRoleRuleQuery) Order(o ...autorolerule.OrderOption) *AutoRoleRuleQuery {
	arrq.order = append(arrq.order, o...)
	return arrq
}

// QueryGuild chains the current query on the "guild" edge.
func (arrq *AutoRoleRuleQuery) QueryGuild() *GuildQuery {
	query := (&GuildClient{config: arrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(autorolerule.Table, autorolerule.FieldID, selector),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, autorolerule.GuildTable, autorolerule.GuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(arrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AutoRoleRule entity from the query.
// Returns a *NotFoundError when no AutoRoleRule was found.
func (arrq *AutoRoleRuleQuery) First(ctx context.Context) (*AutoRoleRule, error) {
	nodes, err := arrq.Limit(1).All(setContextOp(ctx, arrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{autorolerule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (arrq *AutoRoleRuleQuery) FirstX(ctx context.Context) *AutoRoleRule {
	node, err := arrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AutoRoleRule ID from the query.
// Returns a *NotFoundError when no AutoRoleRule ID was found.
func (arrq *AutoRoleRuleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = arrq.Limit(1).IDs(setContextOp(ctx, arrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{autorolerule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (arrq *AutoRoleRuleQuery) FirstIDX(ctx context.Context) int {
	id, err := arrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AutoRoleRule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AutoRoleRule entity is found.
// Returns a *NotFoundError when no AutoRoleRule entities are found.
func (arrq *AutoRoleRuleQuery) Only(ctx context.Context) (*AutoRoleRule, error) {
	nodes, err := arrq.Limit(2).All(setContextOp(ctx, arrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{autorolerule.Label}
	default:
		return nil, &NotSingularError{autorolerule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (arrq *AutoRoleRuleQuery) OnlyX(ctx context.Context) *AutoRoleRule {
	node, err := arrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AutoRoleRule ID in the query.
// Returns a *NotSingularError when more than one AutoRoleRule ID is found.
// Returns a *NotFoundError when no entities are found.
func (arrq *AutoRoleRuleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = arrq.Limit(2).IDs(setContextOp(ctx, arrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{autorolerule.Label}
	default:
		err = &NotSingularError{autorolerule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (arrq *AutoRoleRuleQuery) OnlyIDX(ctx context.Context) int {
	id, err := arrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AutoRoleRules.
func (arrq *AutoRoleRuleQuery) All(ctx context.Context) ([]*AutoRoleRule, error) {
	ctx = setContextOp(ctx, arrq.ctx, "All")
	if err := arrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AutoRoleRule, *AutoRoleRuleQuery]()
	return withInterceptors[[]*AutoRoleRule](ctx, arrq, qr, arrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (arrq *AutoRoleRuleQuery) AllX(ctx context.Context) []*AutoRoleRule {
	nodes, err := arrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AutoRoleRule IDs.
func (arrq *AutoRoleRuleQuery) IDs(ctx context.Context) (ids []int, err error) {
	if arrq.ctx.Unique == nil && arrq.path != nil {
		arrq.Unique(true)
	}
	ctx = setContextOp(ctx, arrq.ctx, "IDs")
	if err = arrq.Select(autorolerule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (arrq *AutoRoleRuleQuery) IDsX(ctx context.Context) []int {
	ids, err := arrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (arrq *AutoRoleRuleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, arrq.ctx, "Count")
	if err := arrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, arrq, querierCount[*AutoRoleRuleQuery](), arrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (arrq *AutoRoleRuleQuery) CountX(ctx context.Context) int {
	count, err := arrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (arrq *AutoRoleRuleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, arrq.ctx, "Exist")
	switch _, err := arrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (arrq *AutoRoleRuleQuery) ExistX(ctx context.Context) bool {
	exist, err := arrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AutoRoleRuleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (arrq *AutoRoleRuleQuery) Clone() *AutoRoleRuleQuery {
	if arrq == nil {
		return nil
	}
	return &AutoRoleRuleQuery{
		config:     arrq.config,
		ctx:        arrq.ctx.Clone(),
		order:      append([]autorolerule.OrderOption{}, arrq.order...),
		inters:     append([]Interceptor{}, arrq.inters...),
		predicates: append([]predicate.AutoRoleRule{}, arrq.predicates...),
		withGuild:  arrq.withGuild.Clone(),
		// clone intermediate query.
		sql:  arrq.sql.Clone(),
		path: arrq.path,
	}
}

// WithGuild tells the query-builder to eager-load the nodes that are connected to
// the "guild" edge. The optional arguments are used to configure the query builder of the edge.
func (arrq *AutoRoleRuleQuery) WithGuild(opts ...func(*GuildQuery)) *AutoRoleRuleQuery {
	query := (&GuildClient{config: arrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arrq.withGuild = query
	return arrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RoleID string `json:"role_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AutoRoleRule.Query().
//		GroupBy(autorolerule.FieldRoleID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (arrq *AutoRoleRuleQuery) GroupBy(field string, fields ...string) *AutoRoleRuleGroupBy {
	arrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AutoRoleRuleGroupBy{build: arrq}
	grbuild.flds = &arrq.ctx.Fields
	grbuild.label = autorolerule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RoleID string `json:"role_id,omitempty"`
//	}
//
//	client.AutoRoleRule.Query().
//		Select(autorolerule.FieldRoleID).
//		Scan(ctx, &v)
func (arrq *AutoRoleRuleQuery) Select(fields ...string) *AutoRoleRuleSelect {
	arrq.ctx.Fields = append(arrq.ctx.Fields, fields...)
	sbuild := &AutoRoleRuleSelect{AutoRoleRuleQuery: arrq}
	sbuild.label = autorolerule.Label
	sbuild.flds, sbuild.scan = &arrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AutoRoleRuleSelect configured with the given aggregations.
func (arrq *AutoRoleRuleQuery) Aggregate(fns ...AggregateFunc) *AutoRoleRuleSelect {
	return arrq.Select().Aggregate(fns...)
}

func (arrq *AutoRoleRuleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range arrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, arrq); err != nil {
				return err
			}
		}
	}
	for _, f := range arrq.ctx.Fields {
		if !autorolerule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if arrq.path != nil {
		prev, err := arrq.path(ctx)
		if err != nil {
			return err
		}
		arrq.sql = prev
	}
	return nil
}

func (arrq *AutoRoleRuleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AutoRoleRule, error) {
	var (
		nodes       = []*AutoRoleRule{}
		withFKs     = arrq.withFKs
		_spec       = arrq.querySpec()
		loadedTypes = [1]bool{
			arrq.withGuild != nil,
		}
	)
	if arrq.withGuild != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, autorolerule.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AutoRoleRule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AutoRoleRule{config: arrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, arrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := arrq.withGuild; query != nil {
		if err := arrq.loadGuild(ctx, query, nodes, nil,
			func(n *AutoRoleRule, e *Guild) { n.Edges.Guild = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (arrq *AutoRoleRuleQuery) loadGuild(ctx context.Context, query *GuildQuery, nodes []*AutoRoleRule, init func(*AutoRoleRule), assign func(*AutoRoleRule, *Guild)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AutoRoleRule)
	for i := range nodes {
		if nodes[i].auto_role_rule_guild == nil {
			continue
		}
		fk := *nodes[i].auto_role_rule_guild
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(guild.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "auto_role_rule_guild" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (arrq *AutoRoleRuleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := arrq.querySpec()
	_spec.Node.Columns = arrq.ctx.Fields
	if len(arrq.ctx.Fields) > 0 {
		_spec.Unique = arrq.ctx.Unique != nil && *arrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, arrq.driver, _spec)
}

func (arrq *AutoRoleRuleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(autorolerule.Table, autorolerule.Columns, sqlgraph.NewFieldSpec(autorolerule.FieldID, field.TypeInt))
	_spec.From = arrq.sql
	if unique := arrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if arrq.path != nil {
		_spec.Unique = true
	}
	if fields := arrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, autorolerule.FieldID)
		for i := range fields {
			if fields[i] != autorolerule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := arrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := arrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := arrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := arrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (arrq *AutoRoleRuleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(arrq.driver.Dialect())
	t1 := builder.Table(autorolerule.Table)
	columns := arrq.ctx.Fields
	if len(columns) == 0 {
		columns = autorolerule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if arrq.sql != nil {
		selector = arrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if arrq.ctx.Unique != nil && *arrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range arrq.predicates {
		p(selector)
	}
	for _, p := range arrq.order {
		p(selector)
	}
	if offset := arrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := arrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AutoRoleRuleGroupBy is the group-by builder for AutoRoleRule entities.
type AutoRoleRuleGroupBy struct {
	selector
	build *AutoRoleRuleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (arrgb *AutoRoleRuleGroupBy) Aggregate(fns ...AggregateFunc) *AutoRoleRuleGroupBy {
	arrgb.fns = append(arrgb.fns, fns...)
	return arrgb
}

// Scan applies the selector query and scans the result into the given value.
func (arrgb *AutoRoleRuleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, arrgb.build.ctx, "GroupBy")
	if err := arrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AutoRoleRuleQuery, *AutoRoleRuleGroupBy](ctx, arrgb.build, arrgb, arrgb.build.inters, v)
}

func (arrgb *AutoRoleRuleGroupBy) sqlScan(ctx context.Context, root *AutoRoleRuleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(arrgb.fns))
	for _, fn := range arrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*arrgb.flds)+len(arrgb.fns))
		for _, f := range *arrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*arrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := arrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AutoRoleRuleSelect is the builder for selecting fields of AutoRoleRule entities.
type AutoRoleRuleSelect struct {
	*AutoRoleRuleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (arrs *AutoRoleRuleSelect) Aggregate(fns ...AggregateFunc) *AutoRoleRuleSelect {
	arrs.fns = append(arrs.fns, fns...)
	return arrs
}

// Scan applies the selector query and scans the result into the given value.
func (arrs *AutoRoleRuleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, arrs.ctx, "Select")
	if err := arrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AutoRoleRuleQuery, *AutoRoleRuleSelect](ctx, arrs.AutoRoleRuleQuery, arrs, arrs.inters, v)
}

func (arrs *AutoRoleRuleSelect) sqlScan(ctx context.Context, root *AutoRoleRuleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(arrs.fns))
	for _, fn := range arrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*arrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := arrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
